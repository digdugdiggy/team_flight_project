var teamFlight = require('cylon');
var keypress = require('keypress');
var net = require('net');
var fs = require('fs');


//commandMode 0 is control through simulator
//commandMode 1 is control through console
var commandMode = 0;				//Default mode
var commandMode = process.argv[2];	//Gets arguments on runtime (used to get from .bat file)

var moveCommand = "string";
var dispText = "Drone Command Received: ";
var dispText2 = "Drone Status Update   : ";
var flightTime = 0;

var droneIP = '192.168.1.1';
var	socket = 6500;

//Acceleration rate values can range from 0.0 to 1.0
//Throttle will act additively on these values (+- .1)
var throttle = 0;
var forwardAccRate = .1;
var backwardAccRate = .1;
var rightAccRate = .1;
var leftAccRate = .1;
var rotateRightAccRate = .6;
var rotateLeftAccRate = .6;
var upAccRate = .3;
var downAccRate = .3;

//Write streams for drone "black box" data
var wstreamBattery = fs.createWriteStream('droneBatteryData.txt');
//var wstreamAltitude = fs.createWriteStream('droneAltitudeData.txt');


teamFlight.robot({
	connections: 
	{
		ardrone: { adaptor: 'ardrone', port: droneIP }
	},

	devices: 
	{    
		drone: { driver: 'ardrone' },
		nav: { driver: 'ardrone-nav' },
	},


	//Work Loop - Continues Running Until Program Exits
	work: function(droneObj) {
	
		droneObj.drone.config('general:navdata_demo', 'TRUE');
	
		var express = require('express')
			, app = express()
			, server = require("http").createServer(app)

		app.use(express.static(__dirname));
		require("dronestream").listen(6400);

		
		//Opens local socket server to receive commands from Java		
		if (commandMode == 0){
			var server = net.createServer(function (commandReceiver){
				console.log("     Java client connected...");
			
				commandReceiver.on('data', function (moveCommand) {
					if (moveCommand == "forward"){
						droneObj.moveForward(droneObj);
					}
					if (moveCommand == "forwardInc"){
						droneObj.moveForwardInc(droneObj);
					}
					if (moveCommand == "backward"){
						droneObj.moveBackward(droneObj);
					}
					if (moveCommand == "backwardInc"){
						droneObj.moveBackwardInc(droneObj);
					}
					if (moveCommand == "right"){
						droneObj.moveRight(droneObj);
					}
					if (moveCommand == "rightInc"){
						droneObj.moveRightInc(droneObj);
					}
					if (moveCommand == "left"){
						droneObj.moveLeft(droneObj);
					}
					if (moveCommand == "leftInc"){
						droneObj.moveLeftInc(droneObj);
					}
					if (moveCommand == "rotateRight"){
						droneObj.rotateRight(droneObj);
					}
					if (moveCommand == "rotateLeft"){
						droneObj.rotateLeft(droneObj);
					}
					if (moveCommand == "up"){
						droneObj.moveUp(droneObj);
					}
					if (moveCommand == "upInc"){
						droneObj.moveUpInc(droneObj);
					}
					if (moveCommand == "down"){
						droneObj.moveDown(droneObj);
					}
					if (moveCommand == "downInc"){
						droneObj.moveDownInc(droneObj);
					}
					if (moveCommand == "droneTakeOff"){
						droneObj.droneTakeOff(droneObj);
					}
					if (moveCommand == "droneLand"){
						droneObj.droneLand(droneObj);
					}
					if (moveCommand == "droneStop"){
						droneObj.droneStop(droneObj);
					}
					if (moveCommand == "droneThrottleInc"){
						droneObj.droneThrottle(.1);
					}
					if (moveCommand == "droneThrottleDec"){
						droneObj.droneThrottle(-.1);
					}
					if (moveCommand == "droneThrottleReset"){
						droneObj.droneThrottle(0);
					}
					if (moveCommand == "forwardRight"){
						droneObj.moveForward(droneObj);
						droneObj.moveRight(droneObj);
					}
					if (moveCommand == "forwardLeft"){
						droneObj.moveForward(droneObj);
						droneObj.moveLeft(droneObj);
					}
					if (moveCommand == "backwardRight"){
						droneObj.moveBackward(droneObj);
						droneObj.moveRight(droneObj);
					}
					if (moveCommand == "backwardLeft"){
						droneObj.moveBackward(droneObj);
						droneObj.moveLeft(droneObj);
					}
					if (moveCommand == "closeConnection"){
						console.log("     Java client disconnected...");
						process.exit();
					}
				});
					
				commandReceiver.on('end', function() {
					console.log("     Java client disconnected...");
				})
				
				process.on('uncaughtException',function(err){
					console.log("     There is a problem with your connection...");
					process.exit();
				})
			});
		
			server.listen(socket, function () {
				console.log("     Listening On Port: " + socket);
			});
		}
		
		
		if (commandMode == 1){
			//Captures keyboard input from console
			keypress(process.stdin);
			process.stdin.on('keypress', function (ch, key) {
				try {
					if (key.sequence == 'w' || key.name == 'up'){
						droneObj.moveForward(droneObj);
					}
					if (key.sequence == 'W'){
						droneObj.moveForwardInc(droneObj);
					}
					if (key.sequence == 's'|| key.name == 'down'){
						droneObj.moveBackward(droneObj);
					}
					if (key.sequence == 'S'){
						droneObj.moveBackwardInc(droneObj);
					}
					if (key.sequence == 'd'|| key.name == 'right'){
						droneObj.moveRight(droneObj);
					}
					if (key.sequence == 'D'){
						droneObj.moveRightInc(droneObj);
					}
					if (key.sequence == 'a'|| key.name == 'left'){
						droneObj.moveLeft(droneObj);
					}
					if (key.sequence == 'A'){
						droneObj.moveLeftInc(droneObj);
					}
					if (key.sequence == 'e' || key.sequence == 'E'){
						droneObj.rotateRight(droneObj);
					}
					if (key.sequence == 'q' || key.sequence == 'Q'){
						droneObj.rotateLeft(droneObj);
					}
					if (key.sequence == 'r' || key.sequence == 'R'){
						droneObj.moveUp(droneObj);
					}
					if (key.sequence == 'f' || key.sequence == 'F'){
						droneObj.moveDown(droneObj);
					}
					if (key.sequence == 'p' || key.sequence == 'P'){
						droneObj.droneTakeOff(droneObj);
					}
					if (key.sequence == 'l' || key.sequence == 'L'){
						droneObj.droneLand(droneObj);
					}
					if (key.sequence == 'b' || key.name == 'space'){
						droneObj.droneStop(droneObj);
					}
					if (key.sequence == 'h'){
						droneObj.droneHover(droneObj);
					}
					if (key.sequence == 'c'){
						droneObj.droneThrottle(.1);
					}
					if (key.sequence == 'z'){
						droneObj.droneThrottle(-.1);
					}
					if (key.sequence == 'x'){
						droneObj.droneThrottle(0);
					}
					if (key.sequence == 'u'){
						droneObj.drone.wave();
						console.log(droneObj.drone.battery());
					}
					if (key.name == 'home'){
						droneObj.moveForward(droneObj);
						droneObj.moveLeft(droneObj);
					}
					if (key.name == 'pageup'){
						droneObj.moveForward(droneObj);
						droneObj.moveRight(droneObj);
					}
					if (key.name == 'end'){
						droneObj.moveBackward(droneObj);
						droneObj.moveLeft(droneObj);
					}
					if (key.name == 'pagedown'){
						droneObj.moveBackward(droneObj);
						droneObj.moveRight(droneObj);
					}
					if (key.name == 'undefined'){
						droneObj.droneStop(droneObj);
					}
					if (key.sequence == 'm'){
						//droneObj.changeCommandMode(0);
						console.clear();
					}
				}
				catch (error) {
					console.log("     Unknown command");
				}
			});
		}
		
		
		droneObj.nav.on('batteryChange', function(data) {
			wstreamBattery.write(data + "");
			wstreamBattery.write("\r\n");
			console.log("     Battery Charge: " + data + "%");
		})
		
		/*
		droneObj.nav.on('altitudeChange', function(data2) {
			wstreamAltitude.write(data2 + "");
			wstreamAltitude.write("\r\n");
			//console.log("     Altitude Charge: " + data2 + "%");
		})*/
	},



	// Command Functions
	 moveForward: function(droneRef) {
		droneRef.drone.front(forwardAccRate + throttle);
		console.log("     " + dispText + "(" + (100 * (forwardAccRate + throttle)) + "%) Forward");
	},

	moveForwardInc: function(droneRef) {
		droneRef.drone.front(forwardAccRate + throttle);
		after((1).second(), function() {
			droneRef.droneStop(droneRef);
		});
		console.log("     " + dispText + "(" + (100 * (forwardAccRate + throttle)) + "%) Forward then Stop");
	},

	moveBackward: function(droneRef) {
		droneRef.drone.back(backwardAccRate + throttle);
		console.log("     " + dispText + "(" + (100 * (backwardAccRate + throttle)) + "%) Backward");
	},
	
	moveBackwardInc: function(droneRef) {
		droneRef.drone.back(backwardAccRate + throttle);
		after((1).second(), function() {
			droneRef.droneStop(droneRef);
		});
		console.log("     " + dispText + "(" + (100 * (backwardAccRate + throttle)) + "%) Backward then Stop");
	},

	moveRight: function(droneRef) {
		droneRef.drone.right(rightAccRate + throttle);
		console.log("     " + dispText + "(" + (100 * (rightAccRate + throttle)) + "%) Right");
	},
	
	moveRightInc: function(droneRef) {
		droneRef.drone.right(rightAccRate + throttle);
		after((1).second(), function() {
			droneRef.droneStop(droneRef);
		});
		console.log("     " + dispText + "(" + (100 * (rightAccRate + throttle)) + "%) Right then Stop");
	},

	moveLeft: function(droneRef) {
		droneRef.drone.left(leftAccRate + throttle);
		console.log("     " + dispText + "(" + (100 * (leftAccRate + throttle)) + "%) Left");
	},
	
	moveLeftInc: function(droneRef) {
		droneRef.drone.left(leftAccRate + throttle);
		after((1).second(), function() {
			droneRef.droneStop(droneRef);
		});
		console.log("     " + dispText + "(" + (100 * (leftAccRate + throttle)) + "%) Left then Stop");
	},

	rotateRight: function(droneRef) {
		droneRef.drone.clockwise(rotateRightAccRate);
		console.log("     " + dispText + "(" + (100 * (rotateRightAccRate + 0)) + "%) Right Rotate");
	},

	rotateLeft: function(droneRef) {
		droneRef.drone.counterClockwise(rotateLeftAccRate);
		console.log("     " + dispText + "(" + (100 * (rotateLeftAccRate + 0)) + "%) Left Rotate");
	},  

	moveUp: function(droneRef) {
		droneRef.drone.up(upAccRate);
		console.log("     " + dispText + "(" + (100 * upAccRate) + "%) Up");
	},
	
	moveUpInc: function(droneRef) {
		droneRef.drone.up(upAccRate);
		
		after((2).second(), function() {
			droneRef.droneStop(droneRef);
		});
		console.log("     " + dispText + "(" + (100 * upAccRate) + "%) Up");
	},
	
	moveDown: function(droneRef) {
		droneRef.drone.down(downAccRate);
		console.log("     " + dispText + "(" + (100 * downAccRate) + "%) Down");
	},	

	moveDownInc: function(droneRef) {
		droneRef.drone.down(downAccRate);
		
		after((2).second(), function() {
			droneRef.droneStop(droneRef);
		});
		console.log("     " + dispText + "(" + (100 * downAccRate) + "%) Down");
	},	
		
	droneTakeOff: function(droneRef) {
		droneRef.drone.takeoff();
		console.log("     " + dispText + "Take Off");
	},

	droneLand: function(droneRef) {
		droneRef.drone.land();
		console.log("     " + dispText + "Landing");
		flightTime = 0;
	},
	  
	droneStop: function(droneRef) {
		droneRef.drone.stop();
		console.log("     " + dispText + "Stop and Reset");
	},  

	droneHover: function(droneRef) {
		droneRef.drone.hover();
		console.log("     " + dispText + "Hovering");
	},  

	droneThrottle: function(accFactor) {
		if (accFactor == 0)	throttle = 0;
		else {
			throttle = throttle + accFactor;
			
			if (throttle < 0) throttle = 0;
			if (throttle > 1) throttle = 1;
		}
		console.log("     " + dispText + "Current Acceleration Rate: " + throttle);
	},  
	
	changeCommandMode: function(cmSelect) {
		if (cmSelect = 1) commandMode = 1;
		if (cmSelect = 0) commandMode = 0;
	},
	
	waitCommand: function(droneRef) {
		after((2).second(), function() {
			readyReceive = true;
		});
	},  
});

teamFlight.start();














